#/bin/bash

if [ $# -lt 1 ]; then
    echo "Missing arguments, exiting"
    echo "For help do: ./todoer -h or ./todoer --help"
    exit 1
fi

todo_pattern=TODO
repo=
strict=
todoer_help="\

    Usage: ./todoer [options]

    Options:
        -r, --repo      The name of the git repo to analyse.
        -s, --strict    If any internal data pipeline fails then exit.
        -h, --help      Print this help.
"

while (( "$#" )); do
    case $1 in
        -r | --repo)    shift; echo "using repo: $1"; $repo="$1"; shift ;;
        -s | --strict)  shift; echo "running in strict mode"; $strict="yep" ;;
        -h | --help)    shift; printf "%s\n" "$todoer_help"; exit 0 ;;
        *) break ;;
    esac
done

# TODO handle relative paths in proper way

check_for_pipeline_error() {
    if [ "$strict" != "" ]; then
        for i in ${PIPESTATUS[*]}; do
            if [ $i != 0 ]; then
                echo "There was an error in the pipeline"
                echo "Terminating execution"
                exit 1
            fi
        done
    fi
}

find_files_with_todos() {
    ack -l $todo_pattern
}

find_todo_line_nums() {
    cat $1 | xargs grep -n $todo_pattern | cut -d : -f $2 > ../$3
    check_for_pipeline_error
}

create_tmp_files() {
    cd $repo
    find_files_with_todos > ../todo_file_list
    find_todo_line_nums todo_file_list 1 todo_files
    find_todo_line_nums todo_file_list 2 todo_line_nums
}

cleanup() {
    cd ..
    rm todo_file_list todo_files todo_line_nums
}

lay_the_blame() {
    create_tmp_files
    file_array=( `cat "../todo_files" ` )
    line_num_array=( `cat "../todo_line_nums"` )
    num_todos=${#file_array[@]}
    n=`expr $num_todos - 1`
    for i in $(seq 0 $n); do
        git blame --date iso ${file_array[$i]} -L ${line_num_array[$i]},${line_num_array[$i]}
    done
}

get_todo_dates() {
    cat $1 \
        | sed 's/\(^.*\)\((.*....-..-..\.*)\)\(.*$\)/\2/g' \
        | sed 's/.*\(....-..-..\).*/\1/g' \
        | grep -v '^.*[a-zA-Z].*'
    check_for_pipeline_error
}

duration_in_days() {
    currdate=$(date '+%s')
    date_array=( `cat ../dates` )
    for date in ${date_array[*]}; do
        d=$(date -jf "%Y-%m-%d" ${date} '+%s')
        ddiff=`expr $currdate - $d`
        days=`expr $ddiff / 86400`
        echo $days
    done
}

years_old() {
    dur_array=( `cat "../duration"` )
    for dur in ${dur_array[*]}; do
        appr_yrs=$(echo "scale = 1; x = $dur / 365; if (x < 1) print 0; x" | bc)
        echo $appr_yrs
    done
}

summarise() {
    years_old | sort | uniq -c | sort -nr | sed 's/\(.*\) \(.*\)/\1 - \2 years/g'
    check_for_pipeline_error
}

find_todos_and_report() {
    lay_the_blame > ../theblame
    get_todo_dates ../theblame > ../dates
    duration_in_days > ../duration
    hist
    #cleanup # TODO make this optional
}

hist() {
    # implementation thanks to http://www.smallmeans.com/notes/shell-history/
    years_old |  sort | uniq -c | sort -rn \
        | awk '!max{max=$1+"";}{r="";i=s=60*$1/max;while(i-->0){r=r"#";}printf "%15s yrs %5d %s %s",$2,$1,r,"\n";}'
}

find_todos_and_report
